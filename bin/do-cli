#!/usr/bin/env node
var fs = require('fs');
var _ = require('lodash');
var minimist = require('minimist');
var DigitalOceanAPI = require('digitalocean-api');

var config = require(process.cwd()+'/do-conf');
var api = new DigitalOceanAPI(config.clientId, config.apiKey);

var argv = minimist(process.argv.slice(2), {
  alias: {
    id: 'id',
    list: 'ls',
    listNames: 'names',
    reboot: 'reboot',
    powerCycle: 'pc',
    shutdown: 'sd',
    help: 'help'
  }
});

if (argv.help || (Object.keys(argv).length === 1 && argv._.length === 0)) {
  fs.createReadStream(__dirname + '/../usage.txt').pipe(process.stdout);
  return;
}

var outputName = function(name){
  return console.log(name+':\n');
};


if (argv.list){
  outputName('Droplets');
  api.dropletGetAll(function(error, droplets){
    if (error){
      console.log(error, 'You might want to check your do-conf.js file.');
      process.exit(1);
    }
    console.log(droplets);
  });
}

if (argv.listNames){
  outputName('Droplet Names');
  api.dropletGetAll(function(error, droplets){
    if (error){
      console.log(error, 'You might want to check your do-conf.js file.');
      process.exit(1);
    }
    _.each(droplets, function(i){
      console.log(i.name, i.id);
    });
  });
}

if (argv.reboot){
  var id = argv.reboot[0] || argv.id[0];
  outputName('Reboting');
  api.dropletReboot(id, function(error, success){
    if (error){
      console.log(error);
      process.exit(1);
    }else {
      console.log(success);
    }
  });
}

if (argv.powerCycle){
  var id = argv.powerCycle[0] || argv.id[0];
  outputName('Power Cycle');
  api.dropletPowerCycle(id, function(error, success){
    if (error){
      console.log(error);
      process.exit(1);
    }else {
      console.log(success);
    }
  });
}

if (argv.shutdown){
  var id = argv.shutdown[0] || argv.id[0];
  outputName('Shutting Down');
  api.dropletShutdown(id, function(error, success){
    if (error){
      console.log(error);
      process.exit(1);
    }else {
      console.log(success);
    }
  });
}

